#include <iostream>
#include <cuda_runtime.h>
#include "kernel.cuh"

int main()
{
    /*
    int64_t *ptrb = new int64_t[64]{
    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};
    
    int64_t *indx = new int64_t[64]{
    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};
    
    float *val = new float[64]{
    2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
    2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
    2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
    2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
    2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
    2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
    2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
    2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,
    };

    float mat[16][16] = {
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 20.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 30.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 40.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 50.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 60.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 70.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 80.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 90.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 100.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 110.0, 10.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 120.0, 10.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 130.0, 10.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 140.0, 10.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 150.0, 10.0},
                        {10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 160.0}};
    float out[16][16] = {
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
                        };
    int m=16;
    int n=16;
    int k=16;
    int nnz=64;
    int rows=m;
    int cols=n;
    
    */
    #include "cora.cuh"
    // Allocate device (GPU) memory
    int64_t *ptrb_device, *indx_device; 
    float *val_device, *mat_device, *out_device;
    cudaMalloc(&ptrb_device, nnz * sizeof(int64_t));
    cudaMalloc(&indx_device, nnz * sizeof(int64_t));
    cudaMalloc(&val_device, nnz * sizeof(float));
    cudaMalloc(&mat_device, n * k * sizeof(float));
    cudaMalloc(&out_device, m * k * sizeof(float)); 
    
    // Copy input data from host to device
    cudaMemcpy(ptrb_device, ptrb, nnz * sizeof(int64_t), cudaMemcpyHostToDevice);
    cudaMemcpy(indx_device, indx, nnz * sizeof(int64_t), cudaMemcpyHostToDevice);
    cudaMemcpy(val_device, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(mat_device, mat, n * k * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(out_device, out, m * k * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel
    //fusedmm_cuda(m, n, k, nnz, indx_device, ptrb_device, val_device, mat_device, out_device, prefix_sum, nnz_row);
    fusedmm_cuda_coo(m, n, k, nnz, indx_device, ptrb_device, val_device, mat_device, out_device);
	
    // Copy output data from device to host
    cudaMemcpy(out, out_device, m * k * sizeof(float), cudaMemcpyDeviceToHost);
    
    // Print output
    for (int i = 0; i < m; i++) {
	    for(int j=0; j<k; j++){
        	std::cout << out[i][j] << " ";
	    }
	    std::cout << "\n";
    }
    std::cout << std::endl;

    // Free memory
    cudaFree(ptrb_device);
    cudaFree(indx_device);
    cudaFree(val_device);
    cudaFree(mat_device);
    cudaFree(out_device);
    
    delete [] ptrb;
    delete [] indx;
    delete [] val;
    // delete [] mat;
    // delete [] out;
    return 0;
}
